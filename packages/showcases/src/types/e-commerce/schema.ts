/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/status": {
    /**
     * Get the status of this Jina service.
     *
     * This is equivalent to running `jina -vf` from command line.
     *
     * .. # noqa: DAR201
     */
    get: operations["_status_status_get"];
  };
  "/post": {
    /**
     * Post a data request to some endpoint.
     *
     * This is equivalent to the following:
     *
     *     from jina import Flow
     *
     *     f = Flow().add(...)
     *
     *     with f:
     *         f.post(endpoint, ...)
     *
     * .. # noqa: DAR201
     * .. # noqa: DAR101
     */
    post: operations["post_post_post"];
  };
  "/index": {
    /** Post data requests to the Flow. Executors with `@requests(on="/index")` will respond. */
    post: operations["_index_index_post"];
  };
  "/search": {
    /** Post data requests to the Flow. Executors with `@requests(on="/search")` will respond. */
    post: operations["_search_search_post"];
  };
  "/delete": {
    /** Post data requests to the Flow. Executors with `@requests(on="/delete")` will respond. */
    delete: operations["_delete_delete_delete"];
  };
  "/update": {
    /** Post data requests to the Flow. Executors with `@requests(on="/update")` will respond. */
    put: operations["_update_update_put"];
  };
}

export interface components {
  schemas: {
    /** An enumeration. */
    Command: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    ControlRequestProto: {
      command?: components["schemas"]["Command"];
    };
    DataRequestModel: {
      docs?: { [key: string]: unknown }[];
      groundtruths?: { [key: string]: unknown }[];
    };
    DataRequestProto: {
      docs?: components["schemas"]["DocumentProto"][];
      groundtruths?: components["schemas"]["DocumentProto"][];
    };
    DenseNdArrayProto: {
      buffer?: string;
      shape?: number[];
      dtype?: string;
      quantization?: components["schemas"]["QuantizationMode"];
      maxVal?: number;
      minVal?: number;
      scale?: number;
      originalDtype?: string;
    };
    DocumentProto: {
      id?: string;
      granularity?: number;
      adjacency?: number;
      parentId?: string;
      buffer?: string;
      blob?: components["schemas"]["NdArrayProto"];
      text?: string;
      graph?: components["schemas"]["GraphProto"];
      chunks?: components["schemas"]["DocumentProto"][];
      weight?: number;
      matches?: components["schemas"]["DocumentProto"][];
      uri?: string;
      mimeType?: string;
      tags?: { [key: string]: unknown };
      location?: number[];
      offset?: number;
      embedding?: components["schemas"]["NdArrayProto"];
      scores?: { [key: string]: components["schemas"]["NamedScoreProto"] };
      modality?: string;
      evaluations?: { [key: string]: components["schemas"]["NamedScoreProto"] };
    };
    ExceptionProto: {
      name?: string;
      args?: string[];
      stacks?: string[];
      executor?: string;
    };
    GraphProto: {
      adjacency?: components["schemas"]["SparseNdArrayProto"];
      edgeFeatures?: { [key: string]: unknown };
      undirected?: boolean;
    };
    HTTPValidationError: {
      detail?: components["schemas"]["ValidationError"][];
    };
    HeaderProto: {
      execEndpoint?: string;
      targetPeapod?: string;
      noPropagate?: boolean;
    };
    /** Jina HTTP request model that allows customized endpoint. */
    JinaEndpointRequestModel: {
      /** Data to send, a list of dict/string/bytes that can be converted into a list of `Document` objects */
      data?: Partial<components["schemas"]["DocumentProto"][]> &
        Partial<{ [key: string]: unknown }[]> &
        Partial<string[]> &
        Partial<string[]>;
      /** A regex string represent the certain peas/pods request targeted. */
      targetPeapod?: string;
      /** A dictionary of parameters to be sent to the executor. */
      parameters?: { [key: string]: unknown };
      /** The endpoint string, by convention starts with `/`. All executors bind with `@requests(on="/foo")` will receive this request. */
      execEndpoint: string;
    };
    /** Jina HTTP request model. */
    JinaRequestModel: {
      /** Data to send, a list of dict/string/bytes that can be converted into a list of `Document` objects */
      data?: Partial<components["schemas"]["DocumentProto"][]> &
        Partial<{ [key: string]: unknown }[]> &
        Partial<string[]> &
        Partial<string[]>;
      /** A regex string represent the certain peas/pods request targeted. */
      targetPeapod?: string;
      /** A dictionary of parameters to be sent to the executor. */
      parameters?: { [key: string]: unknown };
    };
    /** Jina HTTP Response model. Only `request_id` and `data` are preserved. */
    JinaResponseModel: {
      /** The ID given by Jina service */
      requestId: string;
      /** Returned Documents */
      data?: components["schemas"]["DataRequestModel"];
    };
    /** Pydantic BaseModel for Jina status, used as the response model in REST app. */
    JinaStatusModel: {
      jina: { [key: string]: unknown };
      envs: { [key: string]: unknown };
      usedMemory: string;
    };
    NamedScoreProto: {
      value?: number;
      opName?: string;
      description?: string;
      operands?: components["schemas"]["NamedScoreProto"][];
      refId?: string;
    };
    NdArrayProto: {
      dense?: components["schemas"]["DenseNdArrayProto"];
      sparse?: components["schemas"]["SparseNdArrayProto"];
    };
    /** An enumeration. */
    QuantizationMode: 0 | 1 | 2;
    RequestProto: {
      requestId?: string;
      control?: components["schemas"]["ControlRequestProto"];
      data?: components["schemas"]["DataRequestProto"];
      header?: components["schemas"]["HeaderProto"];
      parameters?: { [key: string]: unknown };
      routes?: components["schemas"]["RouteProto"][];
      status?: components["schemas"]["StatusProto"];
    };
    RouteProto: {
      pod?: string;
      podId?: string;
      startTime?: string;
      endTime?: string;
      status?: components["schemas"]["StatusProto"];
    };
    SparseNdArrayProto: {
      indices?: components["schemas"]["DenseNdArrayProto"];
      values?: components["schemas"]["DenseNdArrayProto"];
      shape?: number[];
    };
    /** An enumeration. */
    StatusCode: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    StatusProto: {
      code?: components["schemas"]["StatusCode"];
      description?: string;
      exception?: components["schemas"]["ExceptionProto"];
    };
    ValidationError: {
      loc: string[];
      msg: string;
      type: string;
    };
  };
}

export interface operations {
  /**
   * Get the status of this Jina service.
   *
   * This is equivalent to running `jina -vf` from command line.
   *
   * .. # noqa: DAR201
   */
  _status_status_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JinaStatusModel"];
        };
      };
    };
  };
  /**
   * Post a data request to some endpoint.
   *
   * This is equivalent to the following:
   *
   *     from jina import Flow
   *
   *     f = Flow().add(...)
   *
   *     with f:
   *         f.post(endpoint, ...)
   *
   * .. # noqa: DAR201
   * .. # noqa: DAR101
   */
  post_post_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RequestProto"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JinaEndpointRequestModel"];
      };
    };
  };
  /** Post data requests to the Flow. Executors with `@requests(on="/index")` will respond. */
  _index_index_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JinaResponseModel"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JinaRequestModel"];
      };
    };
  };
  /** Post data requests to the Flow. Executors with `@requests(on="/search")` will respond. */
  _search_search_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JinaResponseModel"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JinaRequestModel"];
      };
    };
  };
  /** Post data requests to the Flow. Executors with `@requests(on="/delete")` will respond. */
  _delete_delete_delete: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JinaResponseModel"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JinaRequestModel"];
      };
    };
  };
  /** Post data requests to the Flow. Executors with `@requests(on="/update")` will respond. */
  _update_update_put: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JinaResponseModel"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JinaRequestModel"];
      };
    };
  };
}

export interface external {}
